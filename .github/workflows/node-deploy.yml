name: Node Deploy

on:
  workflow_call:
    inputs:
      stage:
        description: Deployment stage
        required: true
        type: string
      app-name:
        description: Application name
        required: true
        type: string
      workspaces:
        description: Paths where dependencies are to be installed
        required: false
        default: .
        type: string
      install-command:
        description: Command to install dependencies
        required: false
        default: npm ci --include=prod --include=dev --include=optional
        type: string
      build-command:
        description: Command to build the application
        required: false
        default: npm run build
        type: string
      build-check-command:
        description: Command to run after building the application to check it worked correctly
        required: false
        type: string
      docker-build-args:
        description: Additional build arguments to be passed to the Docker image build process
        required: false
        type: string
      static-source-path:
        description: Source directory containing static assets to be uploaded to S3 during deployment
        required: false
        type: string
      static-destination-path:
        description: Destination prefix (appended to /$app-name/$version) in S3 where static assets should be uploaded to
        required: false
        type: string
      sentry-release:
        description: Create Sentry release
        required: false
        type: boolean
      sentry-release-prefix:
        description: Sentry release prefix
        required: false
        type: string
      graphql-schema-file:
        description: Path to GraphQL schema file for Apollo Studio
        required: false
        type: string
      apollo-graph-id:
        description: Apollo Studio graph ID
        required: false
        type: string

permissions:
  checks: write
  contents: read
  deployments: write
  id-token: write
  packages: read
  statuses: read

concurrency:
  group: deploy/${{ inputs.app-name }}/${{ inputs.stage }}
  cancel-in-progress: true

env:
  STAGE: ${{ inputs.stage }}

jobs:
  #
  # prepare job
  #
  prepare:
    name: Prepare
    environment: ${{ inputs.stage }}
    outputs:
      deployment-id: ${{ steps.deployment.outputs.deployment_id }}
      existing-image-found: ${{ steps.existing-image.outputs.found }}
    runs-on: ubuntu-latest
    steps:
      # Setup
      - uses: actions/checkout@v4
      - name: Determine build version
        run: |
          echo APP_VERSION="${STAGE}-${GITHUB_SHA:0:7}" >> $GITHUB_ENV
          echo APP_VERSION_SHA="${GITHUB_SHA:0:7}" >> $GITHUB_ENV
      # Status
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: ${{ github.token }}
          environment: ${{ inputs.stage }}
          initial-status: pending
          log-url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      # Parameters and authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.DEPLOY_AWS_ROLE_ARN }}
          role-session-name: gh-actions
          aws-region: ${{ vars.DEPLOY_AWS_REGION }}
      - name: Read environment parameters from SSM
        uses: equalogic/action-aws-ssm-to-dotenv@v1.5.0
        with:
          ssm-path: /ci/${{ inputs.stage }}/${{ inputs.app-name }}
          format: dotenv
          output: .env
          decryption: true
      - name: Load parameters to workflow environment
        run: cat .env >> $GITHUB_ENV
      - name: Log in to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
      # Check if image already exists
      - name: Look for existing image in ECR
        id: existing-image
        shell: bash {0}
        run: |
          aws ecr describe-images --repository-name=${{ env.DOCKER_REPOSITORY_APP }} --image-ids=imageTag=sha-${{ env.APP_VERSION_SHA }}
          if [[ $? == 0 ]]; then
            echo "::notice title=Docker::Existing image with tag sha-${{ env.APP_VERSION_SHA }} was found in repository ${{ env.DOCKER_REPOSITORY_APP }}"
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi
      - name: 'On failure: Update deployment status'
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: failure
          log-url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  #
  # container job
  #
  container:
    needs: [prepare]
    if: needs.prepare.outputs.existing-image-found == 'false'
    name: Build container
    environment: ${{ inputs.stage }}
    outputs:
      image-pushed: ${{ steps.build-result.outputs.image-pushed }}
    runs-on: ubuntu-latest
    steps:
      # Setup
      - uses: actions/checkout@v4
      - name: Determine build version
        run: |
          echo APP_VERSION="${STAGE}-${GITHUB_SHA:0:7}" >> $GITHUB_ENV
          echo APP_VERSION_SHA="${GITHUB_SHA:0:7}" >> $GITHUB_ENV
      # Parameters and authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.DEPLOY_AWS_ROLE_ARN }}
          role-session-name: gh-actions
          aws-region: ${{ vars.DEPLOY_AWS_REGION }}
      - name: Read environment parameters from SSM
        uses: equalogic/action-aws-ssm-to-dotenv@v1.5.0
        with:
          ssm-path: /ci/${{ inputs.stage }}/${{ inputs.app-name }}
          format: dotenv
          output: .env
          decryption: true
      - name: Load parameters to workflow environment
        run: cat .env >> $GITHUB_ENV
      - name: Log in to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
      # Dependencies
      - name: Setup Node.js and NPM
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          always-auth: true
          registry-url: https://registry.npmjs.org
      - if: inputs.workspaces != ''
        name: Setup GitHub package registry authentication
        uses: actions/setup-node@v4
        with:
          registry-url: 'https://npm.pkg.github.com'
          always-auth: true
          token: ${{ secrets.BUILD_USER_TOKEN || github.token }}
      - if: inputs.workspaces != ''
        name: Install dependencies
        run: |
          read -a workspaces <<< "${{ inputs.workspaces }}"
          for workspace in "${workspaces[@]}"; do
            echo "----------------------------------------"
            echo "Installing dependencies in $workspace"
            pushd $workspace
            ${{ inputs.install-command }}
            echo "----------------------------------------"
            popd
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.BUILD_USER_TOKEN || github.token }}
      - if: inputs.workspaces != ''
        name: Archive node_modules
        run: |
          if [ -n "${{ inputs.node-modules-paths }}" ]; then
            read -a paths <<< "${{ inputs.node-modules-paths }}"
          else
            read -a workspaces <<< "${{ inputs.workspaces }}"
            paths=(
              "${workspaces[@]/%/\/node_modules}"
              $(npm query .workspace | node -e "console.log(JSON.parse(require('fs').readFileSync(0)).map(w=>w.location+'/node_modules').join('\n'))")
            )
          fi
          echo "Paths to be archived:"
          echo ${paths[@]}
          tar --use-compress-program "zstd -T0 --long=31 -1" -cf node_modules.tar.zstd -P ${paths[@]}
      - if: inputs.workspaces != ''
        name: Persisting node_modules artifact
        uses: actions/upload-artifact@v4
        with:
          name: node_modules.tar.zstd
          path: node_modules.tar.zstd
          retention-days: 2
      # Compile sources
      - if: inputs.build-command != ''
        name: Build application
        run: ${{ inputs.build-command }}
        env:
          CI: true
          VERSION: ${{ env.APP_VERSION }}
          SENTRY_RELEASE_PREFIX: ${{ inputs.sentry-release-prefix }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      - if: inputs.build-check-command != ''
        name: Check build worked correctly
        run: ${{ inputs.build-check-command }}
      # Upload static assets to S3
      - if: inputs.static-source-path != ''
        name: Upload static assets to S3
        run: aws s3 sync ${{ inputs.static-source-path }} s3://${{ env.STATIC_S3_BUCKET }}/${{ inputs.app-name }}/${{ env.APP_VERSION_SHA }}${{ inputs.static-destination-path }} --no-progress --follow-symlinks --delete
      # Build Docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Determine Docker tags from build metadata
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_APP }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/master' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
      - name: Build and push app image to ECR
        uses: docker/build-push-action@v4
        with:
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          pull: false
          push: true
          context: .
          file: ./Dockerfile
          build-args: |
            VERSION=${{ env.APP_VERSION }}
            GITHUB_TOKEN=${{ secrets.BUILD_USER_TOKEN || github.token }}
            ${{ inputs.docker-build-args }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Build result
        id: build-result
        run: echo "image-pushed=true" >> $GITHUB_OUTPUT
      - name: Move cache
        # This ugly bit is necessary if you don't want your cache to grow forever till it hits GitHub's limit of 5GB.
        # Temp fix for https://github.com/docker/build-push-action/issues/252 and https://github.com/moby/buildkit/issues/1896
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      # Sentry release
      - if: inputs.sentry-release
        name: Create Sentry.io release
        continue-on-error: true
        uses: equalogic/sentry-releases-action@v2.0.0
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        with:
          releaseNamePrefix: ${{ inputs.sentry-release-prefix || inputs.app-name }}@
          tagName: ${{ env.APP_VERSION }}
          sourceMapOptions: '{ "include": ["dist"], "rewrite": true }'
      # Handle failure
      - name: 'On failure: Update deployment status'
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          deployment-id: ${{ needs.prepare.outputs.deployment-id }}
          state: failure
          log-url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  #
  # deploy job
  #
  deploy:
    needs: [prepare, container]
    if: always() && (needs.prepare.outputs.existing-image-found == 'true' || needs.container.outputs.image-pushed == 'true')
    name: Service update
    environment: ${{ inputs.stage }}
    runs-on: ubuntu-latest
    steps:
      # Setup
      - uses: actions/checkout@v4
      - name: Determine release version
        run: |
          echo IMAGE_VERSION="sha-${GITHUB_SHA:0:7}" >> $GITHUB_ENV
          echo APP_VERSION="${STAGE}-${GITHUB_SHA:0:7}" >> $GITHUB_ENV
      # Parameters and authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.DEPLOY_AWS_ROLE_ARN }}
          role-session-name: gh-actions
          aws-region: ${{ vars.DEPLOY_AWS_REGION }}
      - name: Read environment parameters from SSM
        uses: equalogic/action-aws-ssm-to-dotenv@v1.5.0
        with:
          ssm-path: /ci/${{ inputs.stage }}/${{ inputs.app-name }}
          format: dotenv
          output: .env
          decryption: true
      - name: Load parameters to workflow environment
        run: cat .env >> $GITHUB_ENV
      - name: Log in to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
      # Tag Docker image with stage name
      - name: Apply ${{ inputs.stage }} tag to Docker image
        uses: akhilerm/tag-push-action@v2.2.0
        with:
          src: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_APP }}:${{ env.IMAGE_VERSION }}
          dst: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_APP }}:${{ inputs.stage }}
      # Deploy ECS Task
      - name: Deploy ECS task update
        uses: donaldpiret/ecs-deploy@v0.3.0
        with:
          action: deploy
          cluster: ${{ env.CLUSTER_NAME }}
          target: ${{ inputs.app-name }} # service name
          image: >-
            ${{ env.CONTAINER_NAME_APP }} ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_APP }}:${{ env.IMAGE_VERSION }}
          rollback: true
          timeout: 600
      # Publish Apollo schema update
      - if: inputs.graphql-schema-file != '' && inputs.apollo-graph-id != ''
        name: Install Rover
        run: |
          curl -sSL https://rover.apollo.dev/nix/v0.11.1 | sh
          echo "$HOME/.rover/bin" >> $GITHUB_PATH
      - if: inputs.graphql-schema-file != '' && inputs.apollo-graph-id != ''
        name: Publish GraphQL schema to Apollo Studio
        run: rover graph publish ${{ inputs.apollo-graph-id }}@${{ inputs.stage }} --schema ${{ inputs.graphql-schema-file }}
        env:
          APOLLO_KEY: ${{ secrets.APOLLO_KEY }}
          APOLLO_VCS_COMMIT: ${{ github.sha }}
      # Deploy Sentry release
      - if: inputs.sentry-release-prefix != ''
        name: Deploy Sentry release
        continue-on-error: true
        uses: tclindner/sentry-release-deploy-action@v1.0.0
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        with:
          versionPrefix: ${{ inputs.sentry-release-prefix }}@
          version: ${{ env.APP_VERSION }}
          environment: ${{ inputs.stage }}
      # Status
      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          deployment-id: ${{ needs.prepare.outputs.deployment-id }}
          state: success
          description: ${{ inputs.app-name }} @ ${{ env.IMAGE_VERSION }} deployed to ${{ inputs.stage }}
          environment-url: https://${{ env.APP_DOMAIN }}${{ env.APP_PATH }}
          log-url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      # Handle failure
      - name: 'On failure: Update deployment status'
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          deployment-id: ${{ needs.prepare.outputs.deployment-id }}
          state: failure
          log-url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
